:q
 /*---------------------------------------------------------------------------*\ffhsakjfkljsdkjf
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
    This file is part of foam-extend.

    foam-extend is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version.

    foam-extend is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "interFluid.H"
#include "volFields.H"
#include "fvm.H"
#include "fvc.H"
#include "fvMatrices.H"
#include "addToRunTimeSelectionTable.H"
#include "findRefCell.H"
#include "adjustPhi.H"
#include "fluidSolidInterface.H"
#include "fixedGradientFvPatchFields.H"

#include "MULES.H"
#include "subCycle.H"
#include "pimpleControl.H"
#include "twoPhaseMixture.H"
#include "interfaceProperties.H"

#include "EulerDdtScheme.H"
#include "CrankNicolsonDdtScheme.H"
#include "backwardDdtScheme.H"

#include "elasticSlipWallVelocityFvPatchVectorField.H"
#include "elasticWallVelocityFvPatchVectorField.H"
#include "elasticWallPressureFvPatchScalarField.H"
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace fluidSolvers
{

// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //

defineTypeNameAndDebug(interFluid, 0);
addToRunTimeSelectionTable(fluidSolver, interFluid, dictionary);


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

interFluid::interFluid(const fvMesh& mesh)
:
    fluidSolver(this->typeName, mesh),
    pd_
    (
        IOobject
        (
            "pd",
            runTime().timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    ),

    alpha1_
    (
        IOobject
        (
            "alpha1",
            runTime().timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    ),
   // gradp_(fvc::grad(p_)),
    U_
    (
        IOobject
        (
            "U",
            runTime().timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    ),
   
    gradU_(fvc::grad(U_)),

    phi_
    (
        IOobject
        (
            "phi",
            runTime().timeName(),
            mesh,
            IOobject::READ_IF_PRESENT,
            IOobject::AUTO_WRITE
        ),
        fvc::interpolate(U_) & mesh.Sf()
    ),

    twoPhaseProperties_(U_,phi_,"alpha1"),

    rho1_( twoPhaseProperties_.rho1()),

    rho2_( twoPhaseProperties_.rho2()),
    
    rho_
    (
        IOobject
        (
            "rho",
            runTime().timeName(),
            mesh,
            IOobject::READ_IF_PRESENT,
            IOobject::NO_WRITE
        ),
        alpha1_*rho1_ + (scalar(1) - alpha1_ )*rho2_,
        alpha1_.boundaryField().types()
    ),
   
    // ignore rho.oldTIme

    
    rhoPhi_
    (
        IOobject
        (
            "rho*phi",
            runTime().timeName(),
            mesh,
            IOobject::NO_READ,
            IOobject::NO_WRITE
        ),
        rho1_*phi_
    ),

    g_
    (
        IOobject
        (
            "g",
            runTime().constant(),
            mesh,
            IOobject::MUST_READ,
            IOobject::NO_WRITE
        )
    ),
 
    gh_("gh",g_ & mesh.C()),

    ghf_("ghf", g_ & mesh.Cf()),
 
    p_
    (
        IOobject
        (
            "p",
            runTime().timeName(),
            mesh,
            IOobject::NO_READ,
            IOobject::AUTO_WRITE
        ),
        pd_+rho_*gh_ 
    ),

    gradp_(fvc::grad(p_)),    

    interface_(alpha1_, U_, twoPhaseProperties_),

    turbulence_
    (
        incompressible::turbulenceModel::New
        (
            U_, phi_, twoPhaseProperties_
        )
    )

{}

// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

const volVectorField& interFluid::U() const
{
    return U_;
}


const volScalarField& interFluid::p() const
{
    return p_;
}


//- Patch viscous force (N/m2)
tmp<vectorField> interFluid::patchViscousForce(const label patchID) const
{
    tmp<vectorField> tvF
    (
        new vectorField(mesh().boundary()[patchID].size(), vector::zero)
    );

    tvF() =
        rho_  // orig. rho_.value()
       *(
            mesh().boundary()[patchID].nf()
          & turbulence_->devReff()().boundaryField()[patchID]
        );

     vectorField n = mesh().boundary()[patchID].nf();
     tvF() -= n*(n&tvF());

    return tvF;
}

//- Patch pressure force (N/m2)
tmp<scalarField> interFluid::patchPressureForce(const label patchID) const
{
    tmp<scalarField> tpF
    (
        new scalarField(mesh().boundary()[patchID].size(), 0)
    );

   //tpF() = rho_*p().boundaryField()[patchID];

    tpF() = p_.boundaryField()[patchID]*rho_; // orig. rho_.value()
    // tpF() = rho_.boundaryField()[patchID]*p_.boundaryField()[patchID];

    return tpF;
}

//- Patch viscous force (N/m2)
tmp<vectorField> interFluid::faceZoneViscousForce
(
    const label zoneID,
    const label patchID
) const
{
    vectorField pVF = patchViscousForce(patchID);

    tmp<vectorField> tvF
    (
        new vectorField(mesh().faceZones()[zoneID].size(), vector::zero)
    );
    vectorField& vF = tvF();

    const label patchStart =
        mesh().boundaryMesh()[patchID].start();

    forAll(pVF, i)
    {
        vF[mesh().faceZones()[zoneID].whichFace(patchStart + i)] =
            pVF[i];
    }

    // Parallel data exchange: collect pressure field on all processors
    reduce(vF, sumOp<vectorField>());

//Info<< "1 patch viscouse force" << endl;
    return tvF;
}

//- Patch pressure force (N/m2)
tmp<scalarField> interFluid::faceZonePressureForce
(
    const label zoneID,
    const label patchID
) const
{
    scalarField pPF = patchPressureForce(patchID);

    tmp<scalarField> tpF
    (
        new scalarField(mesh().faceZones()[zoneID].size(), 0)
    );
    scalarField& pF = tpF();

    const label patchStart =
        mesh().boundaryMesh()[patchID].start();

    forAll(pPF, i)
    {
        pF[mesh().faceZones()[zoneID].whichFace(patchStart + i)] =
            pPF[i];
    }

    // Parallel data exchange: collect pressure field on all processors
    reduce(pF, sumOp<scalarField>());

    return tpF;
}

tmp<scalarField> interFluid::faceZoneMuEff
(
    const label zoneID,
    const label patchID
) const
{
    scalarField pMuEff =
        rho_*turbulence_->nuEff()().boundaryField()[patchID];

    tmp<scalarField> tMuEff
    (
        new scalarField(mesh().faceZones()[zoneID].size(), 0)
    );
    scalarField& muEff = tMuEff();

    const label patchStart =
        mesh().boundaryMesh()[patchID].start();

    forAll(pMuEff, i)
    {
        muEff[mesh().faceZones()[zoneID].whichFace(patchStart + i)] =
            pMuEff[i];
    }

    // Parallel data exchange: collect pressure field on all processors
    reduce(muEff, sumOp<scalarField>());

    return tMuEff;
}

void interFluid::evolve()
{
    Info << nl<<"Evolving fluid solver : " <<  this->type() <<nl<<endl;

    const fvMesh& mesh = fluidSolver::mesh();

    Info << nl<<"Read fluidProperties" << nl<<endl;

    int nCorr=(readInt(fluidProperties().lookup("nCorrectors")));
    
    int nOuterCorr =
        readInt(fluidProperties().lookup("nOuterCorrectors"));
    int nNonOrthCorr =
        readInt(fluidProperties().lookup("nNonOrthogonalCorrectors"));

    // Prepare for the pressure solution
    label pdRefCell = 0;
    scalar pdRefValue = 0.0;
    setRefCell(pd_, fluidProperties(), pdRefCell, pdRefValue);
    scalar pRefValue = 0.0;
    
    // #   include "initContinuityErrs.H"
    // declare and initialise the initial cumulative continuity error	
    //scalar sumLocalContErr = 0;
    //scalar globalContErr = 0;
    scalar cumulativeContErr = 0;

    for (int oCorr = 0; oCorr < nOuterCorr; oCorr++)
{   

# include "CourantNo_interFluid.H"

    // Make the fluxes absolute to the mesh motion
    // defined in fvcMeshPhi.H
        fvc::makeAbsolute(phi_, U_);  

# include "volContinuityErr_interFluid.H"


# include "correctPhi_interFluid.H"


    // Make the fluxes relative to the mesh motion
    fvc::makeRelative(phi_, U_);

    // ignore checkMeshCourantNo since the default in "readControls.H" is false

    twoPhaseProperties_.correct();

#	include "alphaEqnSubCycles_interFluid.H"
   
#	include "UEqn_interFluid.H"

    // --- PISO loop

    // while (pimple.correct())
    for (int corr=0; corr<nCorr; corr++)
    {

# 	include "pEqn_interFluid.H"
    }

        p_=pd_+rho_*gh_;

        if (pd_.needReference())
        {
            p_ += dimensionedScalar
              (
                 "p",
                  p_.dimensions(),
                  pRefValue - getRefCellValue(p_, pdRefCell)
              );
        }
       
        gradp_ = fvc::grad(p_);

        gradU_ = fvc::grad(U_);

        turbulence_->correct();

}
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace fluidSolvers
} // End namespace Foam

// ************************************************************************* //
